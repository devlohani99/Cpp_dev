class Solution {
public:
    vector<int> ps(vector<int>& h) {
        int n = h.size();
        vector<int> p(n, -1);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && h[s.top()] >= h[i]) {
                s.pop();
            }
            if (!s.empty()) {
                p[i] = s.top();
            }
            s.push(i);
        }
        return p;
    }

    vector<int> ns(vector<int>& h) {
        int n = h.size();
        vector<int> n_s(n, n);
        stack<int> s;
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && h[s.top()] >= h[i]) {
                s.pop();
            }
            if (!s.empty()) {
                n_s[i] = s.top();
            }
            s.push(i);
        }
        return n_s;
    }

    int largestRectangleArea(vector<int>& h) {
        int n = h.size();
        vector<int> p = ps(h);
        vector<int> n_s = ns(h);
        int ar = 0;
        for (int i = 0; i < n; i++) {
            ar = max(ar, h[i] * (n_s[i] - p[i] - 1));
        }
        return ar;
    }
};
