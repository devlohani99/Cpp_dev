//revise1
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        int n = nums.size();

        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;  // Avoid duplicates

            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;  // Avoid duplicates

                int k = j + 1;
                int l = n - 1;

                while (k < l) {
                    long long sum = static_cast<long long>(nums[i]) + nums[j] + nums[k] + nums[l];

                    if (sum == target) {
                        ans.push_back({nums[i], nums[j], nums[k], nums[l]});

                        while (k < l && nums[k] == nums[k + 1]) k++;  
                        while (k < l && nums[l] == nums[l - 1]) l--;  

                        k++;
                        l--;
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }

        return ans;
    }
};

//brute code

#include <bits/stdc++.h>
using namespace std;

string fourSum(vector<int> arr, int target, int n) {
    set<vector<int>> st;

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                for (int l = k + 1; l < n; l++) {
                    int sum = arr[i] + arr[j] + arr[k] + arr[l];
                    if (sum == target) {
                        vector<int> anss = {arr[i], arr[j], arr[k], arr[l]};
                        sort(anss.begin(), anss.end());
                        st.insert(anss);
                    }
                }
            }
        }
    }

    return st.empty() ? "No" : "Yes";
}

